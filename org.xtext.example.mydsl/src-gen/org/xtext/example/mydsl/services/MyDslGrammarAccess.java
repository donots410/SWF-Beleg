/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PrologdslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Prologdsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgamProgramParserRuleCall_0_0 = (RuleCall)cProgamAssignment_0.eContents().get(0);
		private final Assignment cExqueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExqueryExqueryParserRuleCall_1_0 = (RuleCall)cExqueryAssignment_1.eContents().get(0);
		
		//Prologdsl:
		//	progam=Program exquery=Exquery;
		@Override public ParserRule getRule() { return rule; }
		
		//progam=Program exquery=Exquery
		public Group getGroup() { return cGroup; }
		
		//progam=Program
		public Assignment getProgamAssignment_0() { return cProgamAssignment_0; }
		
		//Program
		public RuleCall getProgamProgramParserRuleCall_0_0() { return cProgamProgramParserRuleCall_0_0; }
		
		//exquery=Exquery
		public Assignment getExqueryAssignment_1() { return cExqueryAssignment_1; }
		
		//Exquery
		public RuleCall getExqueryExqueryParserRuleCall_1_0() { return cExqueryExqueryParserRuleCall_1_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Assignment cClauseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_0 = (RuleCall)cClauseAssignment.eContents().get(0);
		
		//Program:
		//	clause+=Clause+;
		@Override public ParserRule getRule() { return rule; }
		
		//clause+=Clause+
		public Assignment getClauseAssignment() { return cClauseAssignment; }
		
		//Clause
		public RuleCall getClauseClauseParserRuleCall_0() { return cClauseClauseParserRuleCall_0; }
	}
	public class ExqueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Exquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Exquery:
		//	'?-' query=Query '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'?-' query=Query '.'
		public Group getGroup() { return cGroup; }
		
		//'?-'
		public Keyword getQuestionMarkHyphenMinusKeyword_0() { return cQuestionMarkHyphenMinusKeyword_0; }
		
		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextpredicateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextpredicatePredicateParserRuleCall_1_1_0 = (RuleCall)cNextpredicateAssignment_1_1.eContents().get(0);
		
		//Query:
		//	predicate=Predicate (',' nextpredicate+=Predicate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate (',' nextpredicate+=Predicate)*
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//(',' nextpredicate+=Predicate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//nextpredicate+=Predicate
		public Assignment getNextpredicateAssignment_1_1() { return cNextpredicateAssignment_1_1; }
		
		//Predicate
		public RuleCall getNextpredicatePredicateParserRuleCall_1_1_0() { return cNextpredicatePredicateParserRuleCall_1_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFactAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_0_0 = (RuleCall)cFactAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//Clause:
		//	fact=Fact | rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//fact=Fact | rule=Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fact=Fact
		public Assignment getFactAssignment_0() { return cFactAssignment_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_0_0() { return cFactFactParserRuleCall_0_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
	}
	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Fact:
		//	predicate=Predicate '.';
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate '.'
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Keyword cColonHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQueryQueryParserRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rule:
		//	predicate=Predicate ':-' query=Query '.';
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate ':-' query=Query '.'
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//':-'
		public Keyword getColonHyphenMinusKeyword_1() { return cColonHyphenMinusKeyword_1; }
		
		//query=Query
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_2_0() { return cQueryQueryParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorFunctorParserRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNexttermAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNexttermTermParserRuleCall_3_1_0 = (RuleCall)cNexttermAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Predicate:
		//	functor=Functor '(' term=Term (',' nextterm+=Term)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//functor=Functor '(' term=Term (',' nextterm+=Term)* ')'
		public Group getGroup() { return cGroup; }
		
		//functor=Functor
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//Functor
		public RuleCall getFunctorFunctorParserRuleCall_0_0() { return cFunctorFunctorParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//term=Term
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_2_0() { return cTermTermParserRuleCall_2_0; }
		
		//(',' nextterm+=Term)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//nextterm+=Term
		public Assignment getNexttermAssignment_3_1() { return cNexttermAssignment_3_1; }
		
		//Term
		public RuleCall getNexttermTermParserRuleCall_3_1_0() { return cNexttermTermParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Functor");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Functor:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Term");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTermAlternatives_0 = (Alternatives)cTermAssignment.eContents().get(0);
		private final RuleCall cTermAtomParserRuleCall_0_0 = (RuleCall)cTermAlternatives_0.eContents().get(0);
		private final RuleCall cTermListParserRuleCall_0_1 = (RuleCall)cTermAlternatives_0.eContents().get(1);
		
		//Term:
		//	term=(Atom | List);
		@Override public ParserRule getRule() { return rule; }
		
		//term=(Atom | List)
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//(Atom | List)
		public Alternatives getTermAlternatives_0() { return cTermAlternatives_0; }
		
		//Atom
		public RuleCall getTermAtomParserRuleCall_0_0() { return cTermAtomParserRuleCall_0_0; }
		
		//List
		public RuleCall getTermListParserRuleCall_0_1() { return cTermListParserRuleCall_0_1; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atom");
		private final Assignment cAtAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cAtAlternatives_0 = (Alternatives)cAtAssignment.eContents().get(0);
		private final RuleCall cAtIDTerminalRuleCall_0_0 = (RuleCall)cAtAlternatives_0.eContents().get(0);
		private final RuleCall cAtNUMBER2TerminalRuleCall_0_1 = (RuleCall)cAtAlternatives_0.eContents().get(1);
		private final RuleCall cAtVARIABLE2TerminalRuleCall_0_2 = (RuleCall)cAtAlternatives_0.eContents().get(2);
		
		////atom=Atom | list=List;
		//Atom:
		//	at=(ID | NUMBER2 | VARIABLE2);
		@Override public ParserRule getRule() { return rule; }
		
		//at=(ID | NUMBER2 | VARIABLE2)
		public Assignment getAtAssignment() { return cAtAssignment; }
		
		//(ID | NUMBER2 | VARIABLE2)
		public Alternatives getAtAlternatives_0() { return cAtAlternatives_0; }
		
		//ID
		public RuleCall getAtIDTerminalRuleCall_0_0() { return cAtIDTerminalRuleCall_0_0; }
		
		//NUMBER2
		public RuleCall getAtNUMBER2TerminalRuleCall_0_1() { return cAtNUMBER2TerminalRuleCall_0_1; }
		
		//VARIABLE2
		public RuleCall getAtVARIABLE2TerminalRuleCall_0_2() { return cAtVARIABLE2TerminalRuleCall_0_2; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKaLeftSquareBracketKeyword_0_0 = (Keyword)cKaAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAtomAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_1_0_0 = (RuleCall)cAtomAssignment_1_0.eContents().get(0);
		private final Assignment cRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRestRestParserRuleCall_1_1_0 = (RuleCall)cRestAssignment_1_1.eContents().get(0);
		private final Assignment cKzAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cKzRightSquareBracketKeyword_2_0 = (Keyword)cKzAssignment_2.eContents().get(0);
		
		//List:
		//	ka='[' (atom=Atom rest=Rest?)? kz=']';
		@Override public ParserRule getRule() { return rule; }
		
		//ka='[' (atom=Atom rest=Rest?)? kz=']'
		public Group getGroup() { return cGroup; }
		
		//ka='['
		public Assignment getKaAssignment_0() { return cKaAssignment_0; }
		
		//'['
		public Keyword getKaLeftSquareBracketKeyword_0_0() { return cKaLeftSquareBracketKeyword_0_0; }
		
		//(atom=Atom rest=Rest?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1_0() { return cAtomAssignment_1_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0_0() { return cAtomAtomParserRuleCall_1_0_0; }
		
		//rest=Rest?
		public Assignment getRestAssignment_1_1() { return cRestAssignment_1_1; }
		
		//Rest
		public RuleCall getRestRestParserRuleCall_1_1_0() { return cRestRestParserRuleCall_1_1_0; }
		
		//kz=']'
		public Assignment getKzAssignment_2() { return cKzAssignment_2; }
		
		//']'
		public Keyword getKzRightSquareBracketKeyword_2_0() { return cKzRightSquareBracketKeyword_2_0; }
	}
	public class RestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOptAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOptListOpt1ParserRuleCall_0_0 = (RuleCall)cOptAssignment_0.eContents().get(0);
		private final RuleCall cListOpt2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListOpt3ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Rest:
		//	opt=ListOpt1 | ListOpt2 | ListOpt3;
		@Override public ParserRule getRule() { return rule; }
		
		//opt=ListOpt1 | ListOpt2 | ListOpt3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//opt=ListOpt1
		public Assignment getOptAssignment_0() { return cOptAssignment_0; }
		
		//ListOpt1
		public RuleCall getOptListOpt1ParserRuleCall_0_0() { return cOptListOpt1ParserRuleCall_0_0; }
		
		//ListOpt2
		public RuleCall getListOpt2ParserRuleCall_1() { return cListOpt2ParserRuleCall_1; }
		
		//ListOpt3
		public RuleCall getListOpt3ParserRuleCall_2() { return cListOpt3ParserRuleCall_2; }
	}
	public class ListOpt1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ListOpt1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		
		//ListOpt1:
		//	'|' atom=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' atom=Atom
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
	}
	public class ListOpt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ListOpt2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtomAtomParserRuleCall_2_0 = (RuleCall)cAtomAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNextatomAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNextatomAtomParserRuleCall_3_1_0 = (RuleCall)cNextatomAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListOpt2:
		//	'|' '[' atom=Atom (',' nextatom+=Atom)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'|' '[' atom=Atom (',' nextatom+=Atom)* ']'
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//atom=Atom
		public Assignment getAtomAssignment_2() { return cAtomAssignment_2; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_2_0() { return cAtomAtomParserRuleCall_2_0; }
		
		//(',' nextatom+=Atom)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//nextatom+=Atom
		public Assignment getNextatomAssignment_3_1() { return cNextatomAssignment_3_1; }
		
		//Atom
		public RuleCall getNextatomAtomParserRuleCall_3_1_0() { return cNextatomAtomParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ListOpt3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ListOpt3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextatomAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextatomAtomParserRuleCall_2_1_0 = (RuleCall)cNextatomAssignment_2_1.eContents().get(0);
		
		//ListOpt3:
		//	',' atom=Atom (',' nextatom+=Atom)*;
		@Override public ParserRule getRule() { return rule; }
		
		//',' atom=Atom (',' nextatom+=Atom)*
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
		
		//(',' nextatom+=Atom)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//nextatom+=Atom
		public Assignment getNextatomAssignment_2_1() { return cNextatomAssignment_2_1; }
		
		//Atom
		public RuleCall getNextatomAtomParserRuleCall_2_1_0() { return cNextatomAtomParserRuleCall_2_1_0; }
	}
	public class FolgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Folge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextatomAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextatomAtomParserRuleCall_1_1_0 = (RuleCall)cNextatomAssignment_1_1.eContents().get(0);
		
		//Folge:
		//	atom=Atom (',' nextatom+=Atom)*;
		@Override public ParserRule getRule() { return rule; }
		
		//atom=Atom (',' nextatom+=Atom)*
		public Group getGroup() { return cGroup; }
		
		//atom=Atom
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_0_0() { return cAtomAtomParserRuleCall_0_0; }
		
		//(',' nextatom+=Atom)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//nextatom+=Atom
		public Assignment getNextatomAssignment_1_1() { return cNextatomAssignment_1_1; }
		
		//Atom
		public RuleCall getNextatomAtomParserRuleCall_1_1_0() { return cNextatomAtomParserRuleCall_1_1_0; }
	}
	
	
	private final PrologdslElements pPrologdsl;
	private final ProgramElements pProgram;
	private final ExqueryElements pExquery;
	private final QueryElements pQuery;
	private final ClauseElements pClause;
	private final FactElements pFact;
	private final RuleElements pRule;
	private final PredicateElements pPredicate;
	private final FunctorElements pFunctor;
	private final TermElements pTerm;
	private final AtomElements pAtom;
	private final ListElements pList;
	private final RestElements pRest;
	private final ListOpt1Elements pListOpt1;
	private final ListOpt2Elements pListOpt2;
	private final ListOpt3Elements pListOpt3;
	private final FolgeElements pFolge;
	private final TerminalRule tID;
	private final TerminalRule tNUMBER2;
	private final TerminalRule tVARIABLE2;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrologdsl = new PrologdslElements();
		this.pProgram = new ProgramElements();
		this.pExquery = new ExqueryElements();
		this.pQuery = new QueryElements();
		this.pClause = new ClauseElements();
		this.pFact = new FactElements();
		this.pRule = new RuleElements();
		this.pPredicate = new PredicateElements();
		this.pFunctor = new FunctorElements();
		this.pTerm = new TermElements();
		this.pAtom = new AtomElements();
		this.pList = new ListElements();
		this.pRest = new RestElements();
		this.pListOpt1 = new ListOpt1Elements();
		this.pListOpt2 = new ListOpt2Elements();
		this.pListOpt3 = new ListOpt3Elements();
		this.pFolge = new FolgeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
		this.tNUMBER2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NUMBER2");
		this.tVARIABLE2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VARIABLE2");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Prologdsl:
	//	progam=Program exquery=Exquery;
	public PrologdslElements getPrologdslAccess() {
		return pPrologdsl;
	}
	
	public ParserRule getPrologdslRule() {
		return getPrologdslAccess().getRule();
	}
	
	//Program:
	//	clause+=Clause+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Exquery:
	//	'?-' query=Query '.';
	public ExqueryElements getExqueryAccess() {
		return pExquery;
	}
	
	public ParserRule getExqueryRule() {
		return getExqueryAccess().getRule();
	}
	
	//Query:
	//	predicate=Predicate (',' nextpredicate+=Predicate)*;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Clause:
	//	fact=Fact | rule=Rule;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Fact:
	//	predicate=Predicate '.';
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}
	
	//Rule:
	//	predicate=Predicate ':-' query=Query '.';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Predicate:
	//	functor=Functor '(' term=Term (',' nextterm+=Term)* ')';
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Functor:
	//	name=ID;
	public FunctorElements getFunctorAccess() {
		return pFunctor;
	}
	
	public ParserRule getFunctorRule() {
		return getFunctorAccess().getRule();
	}
	
	//Term:
	//	term=(Atom | List);
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	////atom=Atom | list=List;
	//Atom:
	//	at=(ID | NUMBER2 | VARIABLE2);
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//List:
	//	ka='[' (atom=Atom rest=Rest?)? kz=']';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Rest:
	//	opt=ListOpt1 | ListOpt2 | ListOpt3;
	public RestElements getRestAccess() {
		return pRest;
	}
	
	public ParserRule getRestRule() {
		return getRestAccess().getRule();
	}
	
	//ListOpt1:
	//	'|' atom=Atom;
	public ListOpt1Elements getListOpt1Access() {
		return pListOpt1;
	}
	
	public ParserRule getListOpt1Rule() {
		return getListOpt1Access().getRule();
	}
	
	//ListOpt2:
	//	'|' '[' atom=Atom (',' nextatom+=Atom)* ']';
	public ListOpt2Elements getListOpt2Access() {
		return pListOpt2;
	}
	
	public ParserRule getListOpt2Rule() {
		return getListOpt2Access().getRule();
	}
	
	//ListOpt3:
	//	',' atom=Atom (',' nextatom+=Atom)*;
	public ListOpt3Elements getListOpt3Access() {
		return pListOpt3;
	}
	
	public ParserRule getListOpt3Rule() {
		return getListOpt3Access().getRule();
	}
	
	//Folge:
	//	atom=Atom (',' nextatom+=Atom)*;
	public FolgeElements getFolgeAccess() {
		return pFolge;
	}
	
	public ParserRule getFolgeRule() {
		return getFolgeAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	'a'..'z' ('a'..'z' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal NUMBER2:
	//	INT;
	public TerminalRule getNUMBER2Rule() {
		return tNUMBER2;
	}
	
	//terminal VARIABLE2:
	//	'A'..'Z';
	public TerminalRule getVARIABLE2Rule() {
		return tVARIABLE2;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
