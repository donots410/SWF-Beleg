/*
 * generated by Xtext 2.13.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Prologdsl";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePrologdsl
entryRulePrologdsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrologdslRule()); }
	iv_rulePrologdsl=rulePrologdsl
	{ $current=$iv_rulePrologdsl.current; }
	EOF;

// Rule Prologdsl
rulePrologdsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologdslAccess().getProgamProgramParserRuleCall_0_0());
				}
				lv_progam_0_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologdslRule());
					}
					set(
						$current,
						"progam",
						lv_progam_0_0,
						"org.xtext.example.mydsl.MyDsl.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologdslAccess().getExqueryExqueryParserRuleCall_1_0());
				}
				lv_exquery_1_0=ruleExquery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologdslRule());
					}
					set(
						$current,
						"exquery",
						lv_exquery_1_0,
						"org.xtext.example.mydsl.MyDsl.Exquery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getClauseClauseParserRuleCall_0());
			}
			lv_clause_0_0=ruleClause
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"clause",
					lv_clause_0_0,
					"org.xtext.example.mydsl.MyDsl.Clause");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleExquery
entryRuleExquery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExqueryRule()); }
	iv_ruleExquery=ruleExquery
	{ $current=$iv_ruleExquery.current; }
	EOF;

// Rule Exquery
ruleExquery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0());
				}
				lv_query_1_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExqueryRule());
					}
					set(
						$current,
						"query",
						lv_query_1_0,
						"org.xtext.example.mydsl.MyDsl.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExqueryAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"org.xtext.example.mydsl.MyDsl.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQueryAccess().getNextpredicatePredicateParserRuleCall_1_1_0());
					}
					lv_nextpredicate_2_0=rulePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQueryRule());
						}
						add(
							$current,
							"nextpredicate",
							lv_nextpredicate_2_0,
							"org.xtext.example.mydsl.MyDsl.Predicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getFactFactParserRuleCall_0_0());
				}
				lv_fact_0_0=ruleFact
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"fact",
						lv_fact_0_0,
						"org.xtext.example.mydsl.MyDsl.Fact");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"rule",
						lv_rule_1_0,
						"org.xtext.example.mydsl.MyDsl.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	iv_ruleFact=ruleFact
	{ $current=$iv_ruleFact.current; }
	EOF;

// Rule Fact
ruleFact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"org.xtext.example.mydsl.MyDsl.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFactAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"org.xtext.example.mydsl.MyDsl.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':-'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_0());
				}
				lv_query_2_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"query",
						lv_query_2_0,
						"org.xtext.example.mydsl.MyDsl.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0());
				}
				lv_functor_0_0=ruleFunctor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"functor",
						lv_functor_0_0,
						"org.xtext.example.mydsl.MyDsl.Functor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0());
				}
				lv_term_2_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"term",
						lv_term_2_0,
						"org.xtext.example.mydsl.MyDsl.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateAccess().getNexttermTermParserRuleCall_3_1_0());
					}
					lv_nextterm_4_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateRule());
						}
						add(
							$current,
							"nextterm",
							lv_nextterm_4_0,
							"org.xtext.example.mydsl.MyDsl.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctor
entryRuleFunctor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctorRule()); }
	iv_ruleFunctor=ruleFunctor
	{ $current=$iv_ruleFunctor.current; }
	EOF;

// Rule Functor
ruleFunctor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctorRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.example.mydsl.MyDsl.ID");
			}
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0());
				}
				lv_term_0_1=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"term",
						lv_term_0_1,
						"org.xtext.example.mydsl.MyDsl.Atom");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1());
				}
				lv_term_0_2=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"term",
						lv_term_0_2,
						"org.xtext.example.mydsl.MyDsl.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_at_0_1=RULE_ID
				{
					newLeafNode(lv_at_0_1, grammarAccess.getAtomAccess().getAtIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"at",
						lv_at_0_1,
						"org.xtext.example.mydsl.MyDsl.ID");
				}
				    |
				lv_at_0_2=RULE_NUMBER2
				{
					newLeafNode(lv_at_0_2, grammarAccess.getAtomAccess().getAtNUMBER2TerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"at",
						lv_at_0_2,
						"org.xtext.example.mydsl.MyDsl.NUMBER2");
				}
				    |
				lv_at_0_3=RULE_VARIABLE2
				{
					newLeafNode(lv_at_0_3, grammarAccess.getAtomAccess().getAtVARIABLE2TerminalRuleCall_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"at",
						lv_at_0_3,
						"org.xtext.example.mydsl.MyDsl.VARIABLE2");
				}
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ka_0_0='['
				{
					newLeafNode(lv_ka_0_0, grammarAccess.getListAccess().getKaLeftSquareBracketKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "ka", lv_ka_0_0, "[");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getAtomAtomParserRuleCall_1_0_0());
					}
					lv_atom_1_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						set(
							$current,
							"atom",
							lv_atom_1_0,
							"org.xtext.example.mydsl.MyDsl.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getRestRestParserRuleCall_1_1_0());
					}
					lv_rest_2_0=ruleRest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						set(
							$current,
							"rest",
							lv_rest_2_0,
							"org.xtext.example.mydsl.MyDsl.Rest");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
		(
			(
				lv_kz_3_0=']'
				{
					newLeafNode(lv_kz_3_0, grammarAccess.getListAccess().getKzRightSquareBracketKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "kz", lv_kz_3_0, "]");
				}
			)
		)
	)
;

// Entry rule entryRuleRest
entryRuleRest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestRule()); }
	iv_ruleRest=ruleRest
	{ $current=$iv_ruleRest.current; }
	EOF;

// Rule Rest
ruleRest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRestAccess().getOptListOpt1ParserRuleCall_0_0());
				}
				lv_opt_0_0=ruleListOpt1
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestRule());
					}
					set(
						$current,
						"opt",
						lv_opt_0_0,
						"org.xtext.example.mydsl.MyDsl.ListOpt1");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getRestAccess().getListOpt2ParserRuleCall_1());
		}
		this_ListOpt2_1=ruleListOpt2
		{
			$current = $this_ListOpt2_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRestAccess().getListOpt3ParserRuleCall_2());
		}
		this_ListOpt3_2=ruleListOpt3
		{
			$current = $this_ListOpt3_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleListOpt1
entryRuleListOpt1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOpt1Rule()); }
	iv_ruleListOpt1=ruleListOpt1
	{ $current=$iv_ruleListOpt1.current; }
	EOF;

// Rule ListOpt1
ruleListOpt1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getListOpt1Access().getVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListOpt1Access().getAtomAtomParserRuleCall_1_0());
				}
				lv_atom_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListOpt1Rule());
					}
					set(
						$current,
						"atom",
						lv_atom_1_0,
						"org.xtext.example.mydsl.MyDsl.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleListOpt2
entryRuleListOpt2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOpt2Rule()); }
	iv_ruleListOpt2=ruleListOpt2
	{ $current=$iv_ruleListOpt2.current; }
	EOF;

// Rule ListOpt2
ruleListOpt2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getListOpt2Access().getVerticalLineKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getListOpt2Access().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListOpt2Access().getAtomAtomParserRuleCall_2_0());
				}
				lv_atom_2_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListOpt2Rule());
					}
					set(
						$current,
						"atom",
						lv_atom_2_0,
						"org.xtext.example.mydsl.MyDsl.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getListOpt2Access().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListOpt2Access().getNextatomAtomParserRuleCall_3_1_0());
					}
					lv_nextatom_4_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListOpt2Rule());
						}
						add(
							$current,
							"nextatom",
							lv_nextatom_4_0,
							"org.xtext.example.mydsl.MyDsl.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getListOpt2Access().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleListOpt3
entryRuleListOpt3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOpt3Rule()); }
	iv_ruleListOpt3=ruleListOpt3
	{ $current=$iv_ruleListOpt3.current; }
	EOF;

// Rule ListOpt3
ruleListOpt3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getListOpt3Access().getCommaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListOpt3Access().getAtomAtomParserRuleCall_1_0());
				}
				lv_atom_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListOpt3Rule());
					}
					set(
						$current,
						"atom",
						lv_atom_1_0,
						"org.xtext.example.mydsl.MyDsl.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getListOpt3Access().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListOpt3Access().getNextatomAtomParserRuleCall_2_1_0());
					}
					lv_nextatom_3_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListOpt3Rule());
						}
						add(
							$current,
							"nextatom",
							lv_nextatom_3_0,
							"org.xtext.example.mydsl.MyDsl.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_ID : 'a'..'z' ('a'..'z'|'0'..'9')*;

RULE_NUMBER2 : RULE_INT;

RULE_VARIABLE2 : 'A'..'Z';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
