/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
					put(grammarAccess.getTermAccess().getTermAlternatives_0(), "rule__Term__TermAlternatives_0");
					put(grammarAccess.getAtomAccess().getAtAlternatives_0(), "rule__Atom__AtAlternatives_0");
					put(grammarAccess.getRestAccess().getAlternatives(), "rule__Rest__Alternatives");
					put(grammarAccess.getPrologdslAccess().getGroup(), "rule__Prologdsl__Group__0");
					put(grammarAccess.getExqueryAccess().getGroup(), "rule__Exquery__Group__0");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getQueryAccess().getGroup_1(), "rule__Query__Group_1__0");
					put(grammarAccess.getFactAccess().getGroup(), "rule__Fact__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup_3(), "rule__Predicate__Group_3__0");
					put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
					put(grammarAccess.getListAccess().getGroup_1(), "rule__List__Group_1__0");
					put(grammarAccess.getListOpt1Access().getGroup(), "rule__ListOpt1__Group__0");
					put(grammarAccess.getListOpt2Access().getGroup(), "rule__ListOpt2__Group__0");
					put(grammarAccess.getListOpt2Access().getGroup_3(), "rule__ListOpt2__Group_3__0");
					put(grammarAccess.getListOpt3Access().getGroup(), "rule__ListOpt3__Group__0");
					put(grammarAccess.getListOpt3Access().getGroup_2(), "rule__ListOpt3__Group_2__0");
					put(grammarAccess.getFolgeAccess().getGroup(), "rule__Folge__Group__0");
					put(grammarAccess.getFolgeAccess().getGroup_1(), "rule__Folge__Group_1__0");
					put(grammarAccess.getPrologdslAccess().getProgamAssignment_0(), "rule__Prologdsl__ProgamAssignment_0");
					put(grammarAccess.getPrologdslAccess().getExqueryAssignment_1(), "rule__Prologdsl__ExqueryAssignment_1");
					put(grammarAccess.getProgramAccess().getClauseAssignment(), "rule__Program__ClauseAssignment");
					put(grammarAccess.getExqueryAccess().getQueryAssignment_1(), "rule__Exquery__QueryAssignment_1");
					put(grammarAccess.getQueryAccess().getPredicateAssignment_0(), "rule__Query__PredicateAssignment_0");
					put(grammarAccess.getQueryAccess().getNextpredicateAssignment_1_1(), "rule__Query__NextpredicateAssignment_1_1");
					put(grammarAccess.getClauseAccess().getFactAssignment_0(), "rule__Clause__FactAssignment_0");
					put(grammarAccess.getClauseAccess().getRuleAssignment_1(), "rule__Clause__RuleAssignment_1");
					put(grammarAccess.getFactAccess().getPredicateAssignment_0(), "rule__Fact__PredicateAssignment_0");
					put(grammarAccess.getRuleAccess().getPredicateAssignment_0(), "rule__Rule__PredicateAssignment_0");
					put(grammarAccess.getRuleAccess().getQueryAssignment_2(), "rule__Rule__QueryAssignment_2");
					put(grammarAccess.getPredicateAccess().getFunctorAssignment_0(), "rule__Predicate__FunctorAssignment_0");
					put(grammarAccess.getPredicateAccess().getTermAssignment_2(), "rule__Predicate__TermAssignment_2");
					put(grammarAccess.getPredicateAccess().getNexttermAssignment_3_1(), "rule__Predicate__NexttermAssignment_3_1");
					put(grammarAccess.getFunctorAccess().getNameAssignment(), "rule__Functor__NameAssignment");
					put(grammarAccess.getTermAccess().getTermAssignment(), "rule__Term__TermAssignment");
					put(grammarAccess.getAtomAccess().getAtAssignment(), "rule__Atom__AtAssignment");
					put(grammarAccess.getListAccess().getKaAssignment_0(), "rule__List__KaAssignment_0");
					put(grammarAccess.getListAccess().getAtomAssignment_1_0(), "rule__List__AtomAssignment_1_0");
					put(grammarAccess.getListAccess().getRestAssignment_1_1(), "rule__List__RestAssignment_1_1");
					put(grammarAccess.getListAccess().getKzAssignment_2(), "rule__List__KzAssignment_2");
					put(grammarAccess.getRestAccess().getOptAssignment_0(), "rule__Rest__OptAssignment_0");
					put(grammarAccess.getListOpt1Access().getAtomAssignment_1(), "rule__ListOpt1__AtomAssignment_1");
					put(grammarAccess.getListOpt2Access().getAtomAssignment_2(), "rule__ListOpt2__AtomAssignment_2");
					put(grammarAccess.getListOpt2Access().getNextatomAssignment_3_1(), "rule__ListOpt2__NextatomAssignment_3_1");
					put(grammarAccess.getListOpt3Access().getAtomAssignment_1(), "rule__ListOpt3__AtomAssignment_1");
					put(grammarAccess.getListOpt3Access().getNextatomAssignment_2_1(), "rule__ListOpt3__NextatomAssignment_2_1");
					put(grammarAccess.getFolgeAccess().getAtomAssignment_0(), "rule__Folge__AtomAssignment_0");
					put(grammarAccess.getFolgeAccess().getNextatomAssignment_1_1(), "rule__Folge__NextatomAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
