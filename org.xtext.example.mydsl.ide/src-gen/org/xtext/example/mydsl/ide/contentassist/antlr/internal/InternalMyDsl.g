/*
 * generated by Xtext 2.13.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePrologdsl
entryRulePrologdsl
:
{ before(grammarAccess.getPrologdslRule()); }
	 rulePrologdsl
{ after(grammarAccess.getPrologdslRule()); } 
	 EOF 
;

// Rule Prologdsl
rulePrologdsl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrologdslAccess().getGroup()); }
		(rule__Prologdsl__Group__0)
		{ after(grammarAccess.getPrologdslAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getClauseAssignment()); }
			(rule__Program__ClauseAssignment)
			{ after(grammarAccess.getProgramAccess().getClauseAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getClauseAssignment()); }
			(rule__Program__ClauseAssignment)*
			{ after(grammarAccess.getProgramAccess().getClauseAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExquery
entryRuleExquery
:
{ before(grammarAccess.getExqueryRule()); }
	 ruleExquery
{ after(grammarAccess.getExqueryRule()); } 
	 EOF 
;

// Rule Exquery
ruleExquery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExqueryAccess().getGroup()); }
		(rule__Exquery__Group__0)
		{ after(grammarAccess.getExqueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFact
entryRuleFact
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactAccess().getGroup()); }
		(rule__Fact__Group__0)
		{ after(grammarAccess.getFactAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctor
entryRuleFunctor
:
{ before(grammarAccess.getFunctorRule()); }
	 ruleFunctor
{ after(grammarAccess.getFunctorRule()); } 
	 EOF 
;

// Rule Functor
ruleFunctor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctorAccess().getNameAssignment()); }
		(rule__Functor__NameAssignment)
		{ after(grammarAccess.getFunctorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getTermAssignment()); }
		(rule__Term__TermAssignment)
		{ after(grammarAccess.getTermAccess().getTermAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAtAssignment()); }
		(rule__Atom__AtAssignment)
		{ after(grammarAccess.getAtomAccess().getAtAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRest
entryRuleRest
:
{ before(grammarAccess.getRestRule()); }
	 ruleRest
{ after(grammarAccess.getRestRule()); } 
	 EOF 
;

// Rule Rest
ruleRest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestAccess().getAlternatives()); }
		(rule__Rest__Alternatives)
		{ after(grammarAccess.getRestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOpt1
entryRuleListOpt1
:
{ before(grammarAccess.getListOpt1Rule()); }
	 ruleListOpt1
{ after(grammarAccess.getListOpt1Rule()); } 
	 EOF 
;

// Rule ListOpt1
ruleListOpt1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOpt1Access().getGroup()); }
		(rule__ListOpt1__Group__0)
		{ after(grammarAccess.getListOpt1Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOpt2
entryRuleListOpt2
:
{ before(grammarAccess.getListOpt2Rule()); }
	 ruleListOpt2
{ after(grammarAccess.getListOpt2Rule()); } 
	 EOF 
;

// Rule ListOpt2
ruleListOpt2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOpt2Access().getGroup()); }
		(rule__ListOpt2__Group__0)
		{ after(grammarAccess.getListOpt2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOpt3
entryRuleListOpt3
:
{ before(grammarAccess.getListOpt3Rule()); }
	 ruleListOpt3
{ after(grammarAccess.getListOpt3Rule()); } 
	 EOF 
;

// Rule ListOpt3
ruleListOpt3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOpt3Access().getGroup()); }
		(rule__ListOpt3__Group__0)
		{ after(grammarAccess.getListOpt3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFactAssignment_0()); }
		(rule__Clause__FactAssignment_0)
		{ after(grammarAccess.getClauseAccess().getFactAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getRuleAssignment_1()); }
		(rule__Clause__RuleAssignment_1)
		{ after(grammarAccess.getClauseAccess().getRuleAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1()); }
		ruleList
		{ after(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__AtAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getAtIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomAccess().getAtIDTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getAtNUMBER2TerminalRuleCall_0_1()); }
		RULE_NUMBER2
		{ after(grammarAccess.getAtomAccess().getAtNUMBER2TerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getAtVARIABLE2TerminalRuleCall_0_2()); }
		RULE_VARIABLE2
		{ after(grammarAccess.getAtomAccess().getAtVARIABLE2TerminalRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestAccess().getOptAssignment_0()); }
		(rule__Rest__OptAssignment_0)
		{ after(grammarAccess.getRestAccess().getOptAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRestAccess().getListOpt2ParserRuleCall_1()); }
		ruleListOpt2
		{ after(grammarAccess.getRestAccess().getListOpt2ParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRestAccess().getListOpt3ParserRuleCall_2()); }
		ruleListOpt3
		{ after(grammarAccess.getRestAccess().getListOpt3ParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prologdsl__Group__0__Impl
	rule__Prologdsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologdslAccess().getProgamAssignment_0()); }
	(rule__Prologdsl__ProgamAssignment_0)
	{ after(grammarAccess.getPrologdslAccess().getProgamAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prologdsl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologdslAccess().getExqueryAssignment_1()); }
	(rule__Prologdsl__ExqueryAssignment_1)
	{ after(grammarAccess.getPrologdslAccess().getExqueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exquery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__0__Impl
	rule__Exquery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
	'?-'
	{ after(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__1__Impl
	rule__Exquery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQueryAssignment_1()); }
	(rule__Exquery__QueryAssignment_1)
	{ after(grammarAccess.getExqueryAccess().getQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getPredicateAssignment_0()); }
	(rule__Query__PredicateAssignment_0)
	{ after(grammarAccess.getQueryAccess().getPredicateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getGroup_1()); }
	(rule__Query__Group_1__0)*
	{ after(grammarAccess.getQueryAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_1__0__Impl
	rule__Query__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getQueryAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getNextpredicateAssignment_1_1()); }
	(rule__Query__NextpredicateAssignment_1_1)
	{ after(grammarAccess.getQueryAccess().getNextpredicateAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getPredicateAssignment_0()); }
	(rule__Fact__PredicateAssignment_0)
	{ after(grammarAccess.getFactAccess().getPredicateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getPredicateAssignment_0()); }
	(rule__Rule__PredicateAssignment_0)
	{ after(grammarAccess.getRuleAccess().getPredicateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1()); }
	':-'
	{ after(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getQueryAssignment_2()); }
	(rule__Rule__QueryAssignment_2)
	{ after(grammarAccess.getRuleAccess().getQueryAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getRuleAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getFunctorAssignment_0()); }
	(rule__Predicate__FunctorAssignment_0)
	{ after(grammarAccess.getPredicateAccess().getFunctorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__2__Impl
	rule__Predicate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getTermAssignment_2()); }
	(rule__Predicate__TermAssignment_2)
	{ after(grammarAccess.getPredicateAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__3__Impl
	rule__Predicate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getGroup_3()); }
	(rule__Predicate__Group_3__0)*
	{ after(grammarAccess.getPredicateAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_3__0__Impl
	rule__Predicate__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getPredicateAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getNexttermAssignment_3_1()); }
	(rule__Predicate__NexttermAssignment_3_1)
	{ after(grammarAccess.getPredicateAccess().getNexttermAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getKaAssignment_0()); }
	(rule__List__KaAssignment_0)
	{ after(grammarAccess.getListAccess().getKaAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_1()); }
	(rule__List__Group_1__0)?
	{ after(grammarAccess.getListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getKzAssignment_2()); }
	(rule__List__KzAssignment_2)
	{ after(grammarAccess.getListAccess().getKzAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__0__Impl
	rule__List__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getAtomAssignment_1_0()); }
	(rule__List__AtomAssignment_1_0)
	{ after(grammarAccess.getListAccess().getAtomAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getRestAssignment_1_1()); }
	(rule__List__RestAssignment_1_1)?
	{ after(grammarAccess.getListAccess().getRestAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOpt1__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt1__Group__0__Impl
	rule__ListOpt1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt1__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt1Access().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getListOpt1Access().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt1__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt1__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt1__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt1Access().getAtomAssignment_1()); }
	(rule__ListOpt1__AtomAssignment_1)
	{ after(grammarAccess.getListOpt1Access().getAtomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOpt2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group__0__Impl
	rule__ListOpt2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getListOpt2Access().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group__1__Impl
	rule__ListOpt2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getListOpt2Access().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group__2__Impl
	rule__ListOpt2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getAtomAssignment_2()); }
	(rule__ListOpt2__AtomAssignment_2)
	{ after(grammarAccess.getListOpt2Access().getAtomAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group__3__Impl
	rule__ListOpt2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getGroup_3()); }
	(rule__ListOpt2__Group_3__0)*
	{ after(grammarAccess.getListOpt2Access().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getListOpt2Access().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOpt2__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group_3__0__Impl
	rule__ListOpt2__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getListOpt2Access().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt2__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt2Access().getNextatomAssignment_3_1()); }
	(rule__ListOpt2__NextatomAssignment_3_1)
	{ after(grammarAccess.getListOpt2Access().getNextatomAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOpt3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt3__Group__0__Impl
	rule__ListOpt3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt3Access().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getListOpt3Access().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt3__Group__1__Impl
	rule__ListOpt3__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt3Access().getAtomAssignment_1()); }
	(rule__ListOpt3__AtomAssignment_1)
	{ after(grammarAccess.getListOpt3Access().getAtomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt3__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt3Access().getGroup_2()); }
	(rule__ListOpt3__Group_2__0)*
	{ after(grammarAccess.getListOpt3Access().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOpt3__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt3__Group_2__0__Impl
	rule__ListOpt3__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt3Access().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getListOpt3Access().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOpt3__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOpt3Access().getNextatomAssignment_2_1()); }
	(rule__ListOpt3__NextatomAssignment_2_1)
	{ after(grammarAccess.getListOpt3Access().getNextatomAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prologdsl__ProgamAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologdslAccess().getProgamProgramParserRuleCall_0_0()); }
		ruleProgram
		{ after(grammarAccess.getPrologdslAccess().getProgamProgramParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__ExqueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologdslAccess().getExqueryExqueryParserRuleCall_1_0()); }
		ruleExquery
		{ after(grammarAccess.getPrologdslAccess().getExqueryExqueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ClauseAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getClauseClauseParserRuleCall_0()); }
		ruleClause
		{ after(grammarAccess.getProgramAccess().getClauseClauseParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__QueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0()); }
		ruleQuery
		{ after(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__NextpredicateAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getNextpredicatePredicateParserRuleCall_1_1_0()); }
		rulePredicate
		{ after(grammarAccess.getQueryAccess().getNextpredicatePredicateParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FactAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFactFactParserRuleCall_0_0()); }
		ruleFact
		{ after(grammarAccess.getClauseAccess().getFactFactParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_0()); }
		ruleRule
		{ after(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getFactAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getRuleAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__QueryAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__FunctorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0()); }
		ruleFunctor
		{ after(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__NexttermAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getNexttermTermParserRuleCall_3_1_0()); }
		ruleTerm
		{ after(grammarAccess.getPredicateAccess().getNexttermTermParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getTermAlternatives_0()); }
		(rule__Term__TermAlternatives_0)
		{ after(grammarAccess.getTermAccess().getTermAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__AtAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getAtAlternatives_0()); }
		(rule__Atom__AtAlternatives_0)
		{ after(grammarAccess.getAtomAccess().getAtAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__KaAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getKaLeftSquareBracketKeyword_0_0()); }
		(
			{ before(grammarAccess.getListAccess().getKaLeftSquareBracketKeyword_0_0()); }
			'['
			{ after(grammarAccess.getListAccess().getKaLeftSquareBracketKeyword_0_0()); }
		)
		{ after(grammarAccess.getListAccess().getKaLeftSquareBracketKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__AtomAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getAtomAtomParserRuleCall_1_0_0()); }
		ruleAtom
		{ after(grammarAccess.getListAccess().getAtomAtomParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__RestAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getRestRestParserRuleCall_1_1_0()); }
		ruleRest
		{ after(grammarAccess.getListAccess().getRestRestParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__KzAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getKzRightSquareBracketKeyword_2_0()); }
		(
			{ before(grammarAccess.getListAccess().getKzRightSquareBracketKeyword_2_0()); }
			']'
			{ after(grammarAccess.getListAccess().getKzRightSquareBracketKeyword_2_0()); }
		)
		{ after(grammarAccess.getListAccess().getKzRightSquareBracketKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__OptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestAccess().getOptListOpt1ParserRuleCall_0_0()); }
		ruleListOpt1
		{ after(grammarAccess.getRestAccess().getOptListOpt1ParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt1__AtomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpt1Access().getAtomAtomParserRuleCall_1_0()); }
		ruleAtom
		{ after(grammarAccess.getListOpt1Access().getAtomAtomParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__AtomAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpt2Access().getAtomAtomParserRuleCall_2_0()); }
		ruleAtom
		{ after(grammarAccess.getListOpt2Access().getAtomAtomParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt2__NextatomAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpt2Access().getNextatomAtomParserRuleCall_3_1_0()); }
		ruleAtom
		{ after(grammarAccess.getListOpt2Access().getNextatomAtomParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__AtomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpt3Access().getAtomAtomParserRuleCall_1_0()); }
		ruleAtom
		{ after(grammarAccess.getListOpt3Access().getAtomAtomParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpt3__NextatomAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpt3Access().getNextatomAtomParserRuleCall_2_1_0()); }
		ruleAtom
		{ after(grammarAccess.getListOpt3Access().getNextatomAtomParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : 'a'..'z' ('a'..'z'|'0'..'9')*;

RULE_NUMBER2 : RULE_INT;

RULE_VARIABLE2 : 'A'..'Z';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
